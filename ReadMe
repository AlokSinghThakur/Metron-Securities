# Secure Data Hashing API

## Overview
This API provides endpoints to securely hash and encode sensitive user data such as credit card numbers, PAN card details, and email addresses. It uses bcrypt for hashing and allows scheduled encoding across all collections in the database.

## Features
- Hashes sensitive fields dynamically based on regex patterns.
- Periodic encoding of database records every 10 seconds.
- Ability to start and stop encoding dynamically.
- Secure hashing using SHA-256.
- Decoding functionality to retrieve original values.

## Installation
1. Clone the repository:
   ```sh
   git clone <repo-url>
   ```
2. Navigate to the project directory:
   ```sh
   cd node-hashing-app
   ```
3. Install dependencies:
   ```sh
   npm install
   ```
4. Set up environment variables:
   - Create a `.env` file in the root directory.
   - Add the following configuration:
     ```sh
     REGEX_PATTERNS={"creditCard":"^\\d{4}-\\d{4}-\\d{4}-\\d{4}$", "pancard":"^[A-Z]{5}[0-9]{4}[A-Z]{1}$", "email":"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$"}
     ```

## Usage

### Start the Server
```sh
node server.js
```

### API Endpoints

#### Fetch and Hash Users
- **Endpoint:** `GET /`
- **Description:** Fetches all users and hashes their sensitive data fields.
- **Response:**
  ```json
  {
    "message": "Successfully hashed sensitive fields (Credit Card & PAN Card).",
    "totalUpdated": 5
  }
  ```

#### Start Automatic Encoding
- **Endpoint:** `GET /encode`
- **Description:** Starts a process that automatically hashes sensitive fields every 10 seconds.
- **Response:**
  ```json
  { "message": "Encoding started, running every 10 seconds." }
  ```

#### Stop Automatic Encoding
- **Endpoint:** `GET /stop-encode`
- **Description:** Stops the ongoing encoding process.
- **Response:**
  ```json
  { "message": "Encoding process stopped." }
  ```

#### Decode Data
- **Endpoint:** `GET /decode`
- **Description:** Decodes the hashed user data.
- **Response:**
  ```json
  { "message": "Decoded values logged to console." }
  ```

## How It Works
1. The API fetches all users from the database.
2. It iterates over all fields and checks them against regex patterns.
3. If a field matches a pattern, it is hashed and stored securely.
4. The encoding process can run periodically every 10 seconds.
5. Decoding is possible for PAN card and credit card fields using Base64.

## Technologies Used
- Node.js
- Express.js
- Mongoose
- Bcrypt
- SHA-256 Hashing
- MongoDB

## License
This project is licensed under the MIT License.

## Author
Developed by **Alok Singh Thakur** ðŸš€

